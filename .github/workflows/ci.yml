name: ci

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARCH: amd64
  PATCH_FILE: Signal-Desktop.patch

jobs:
  dockerfile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          export SIGNAL_VERSION=$(cat ./SIGNAL_VERSION | head -n 1 | tr -d vV)
          echo "SIGNAL_VERSION=$SIGNAL_VERSION" >> $GITHUB_ENV
          echo "FEDORA_VERSION=$(cat ./FEDORA_VERSION | head -n 1)" >> $GITHUB_ENV
          echo "NODE_VERSION=$(curl -s https://raw.githubusercontent.com/signalapp/Signal-Desktop/refs/tags/v$SIGNAL_VERSION/.nvmrc)" >> $GITHUB_ENV
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest
      - uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6
        id: build-and-push
        with:
          file: Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ARCH=${{ env.ARCH }}
            FEDORA_VERSION=${{ env.FEDORA_VERSION }}
            SIGNAL_VERSION=${{ env.SIGNAL_VERSION }}
            PATCH_FILE=patch/${{ env.PATCH_FILE }}
            NODE_VERSION=${{ env.NODE_VERSION }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  signal-desktop:
    needs: dockerfile
    if: needs.dockerfile.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "SIGNAL_VERSION=$(cat ./SIGNAL_VERSION | head -n 1 | tr -d vV)" >> $GITHUB_ENV
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=latest
      - run: |
          mkdir -p ./output/
          docker run --rm -e SIGNAL_VERSION=${{ env.SIGNAL_VERSION }} -v ./output:/output:Z ${{ steps.meta.outputs.tags }}
